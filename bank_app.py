import tkinter as tk
from tkinter import messagebox, filedialog
import json
from bank_account import BankAccount
from database_manager import Database_manager
from utils import center_main_window, validate_float, format_currency


class BankApp:
    def __init__(self, root):
        self.root = root
        self.db_manager = Database_manager()
        self.root.title("Bank Accounts - 1.0")
        center_main_window(self.root, 500, 500)

        self.create_widgets()

        self.update_account_list()

        # self.update_statistics()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        title_label =  tk.Label(self.root, text="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞",
                                font=('Arial', 16, 'bold'), fg="#2E4057")
        title_label.place(x=180, y=10)

        btn_create = tk.Button(self.root, text="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                               command=self.open_create_account_window,
                               width=15, bg="#4CAF50", fg="white")
        btn_create.place(x=20, y=50)

        btn_transfer = tk.Button(self.root, text="–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                                 command=self.open_transfer_money_window,
                                 width=15, bg="#F44336", fg="white")
        btn_transfer.place(x=20, y=90)

        btn_delete = tk.Button(self.root, text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                               command=self.open_delete_account_window,
                               width=15, bg="#4CAF50", fg="white")
        btn_delete.place(x=20, y=130)

        btn_deposit = tk.Button(self.root, text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç",
                               command=self.open_deposit_window,
                               width=15, bg="#FF9800", fg="white")
        btn_deposit.place(x=20, y=170)

        btn_withdraw = tk.Button(self.root, text="–°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞",
                               command=self.open_withdraw_window,
                               width=15, bg="#9C27B0", fg="white")
        btn_withdraw.place(x=20, y=210)

        btn_refresh = tk.Button(self.root, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                               command=self.refresh_all,
                               width=15, bg="#607D8B", fg="white")
        btn_refresh.place(x=20, y=260)

        self.label_accounts = tk.Label(self.root, text="–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                                       font=('Arial', 12, 'bold'))
        self.label_accounts.place(x=200, y=80)

        list_frame = tk.Frame(self.root)
        list_frame.place(x=200, y=80)

        scrollbar = tk.Scrollbar(self.root)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.listbox_accounts = tk.Listbox(self.root, height=15, width=40,
                                           yscrollcommand=scrollbar.set,
                                           font=('Courier', 10))
        self.listbox_accounts.pack(side=tk.RIGHT)
        scrollbar.config(command=self.listbox_accounts.yview)

        self.stats_frame = tk.Frame(self.root, relief=tk.RAISED, bd=2)
        self.stats_frame.place(x=20, y=320)


    def update_account_list(self):
        self.listbox_accounts.delete(0, tk.END)
        accounts = self.db_manager.load_all_accounts()

        if not accounts:
            self.listbox_accounts.insert(tk.END, "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–¥")
        else:
            for account in accounts:
                display_text = f'{account.owner:<20} | {account.balance:>12.2f}'
                self.listbox_accounts.insert(tk.END, display_text)


    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        pass


    def refresh_all(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        pass


    def open_create_account_window(self):
        window = tk.Toplevel(self.root)
        window.title("–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
        center_main_window(window, 300, 300)
        tk.label_create = tk.Label(window, text="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞", font=("Arial", 13, "bold"), fg="#7B68EE")
        tk.label_create.place(x=40, y=10)

        tk.label_name = tk.Label(window, text="–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞").place(x=90, y=50)
        entry_name = tk.Entry(window)
        entry_name.place(x=90, y=70)

        tk.label_balance = tk.Label(window, text="–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å").place(x=90, y=100)
        entry_balance = tk.Entry(window)
        entry_balance.place(x=90, y=120)

        tk.label_password = tk.Label(window, text="–ü–∞—Ä–æ–ª—å").place(x=90, y=150)
        entry_password = tk.Entry(window, show="*")
        entry_password.place(x=90, y=170)

        tk.label_password_confirm = tk.Label(window, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å").place(x=90, y=200)
        entry_password_confirm = tk.Entry(window, show="*")
        entry_password_confirm.place(x=90, y=220)

        def create_account():
            name = entry_name.get().strip()
            balance = entry_balance.get().strip()
            password = entry_password.get().strip()
            password_confirm = entry_password_confirm.get().strip()
            print("–ü–∞—Ä–æ–ª–∏ ",password, password_confirm)
            if not name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            if not balance:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            if not balance.isdigit():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            if not password or not password_confirm:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è")
                return

            try:
                account = BankAccount(name)
                account.set_password(password)
                account.deposit(float(balance))
                self.accounts.append(account)
                self.db_manager.save_account(account)
                self.update_account_list()
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è {entry_name.get()} —Å–æ–∑–¥–∞–Ω")
                entry_name.delete(0, tk.END)
                entry_balance.delete(0, tk.END)

                window.destroy()

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞",str(e))

        btn_create = tk.Button(window, text="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", command=create_account, bg="#EE82EE")
        btn_create.place(x=90, y=250)


    def open_transfer_money_window(self):
        window = tk.Toplevel(self.root)
        window.title("–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
        center_main_window(window, 300, 300)

        tk.label_sender = tk.Label(window, text="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å").place(x=20, y=30)
        entry_sender = tk.Entry(window)
        entry_sender.place(x=20, y=50)

        tk.label_receiver = tk.Label(window, text="–ü–æ–ª—É—á–∞—Ç–µ–ª—å").place(x=150, y=30)
        entry_receiver = tk.Entry(window)
        entry_receiver.place(x=150, y=50)

        tk.label_sum = tk.Label(window, text="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞").place(x=100, y=80)
        entry_sum = tk.Entry(window)
        entry_sum.place(x=100, y=100)

        tk.label_password = tk.Label(window, text="–ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        tk.label_password.place(x=100, y=130)
        entry_password = tk.Entry(window, show="*")
        entry_password.place(x=100, y=150)


        def transfer_money():
            sender_name = entry_sender.get().strip()
            receiver_name = entry_receiver.get().strip()
            sum_text = entry_sum.get().strip()
            password = entry_password.get().strip()

            if not sender_name or not receiver_name or not sum_text or not password:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                return

            try:
                amount = float(sum_text)
                if amount < 0:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞")
                    return
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return

            sender = self.db_manager.get_account(sender_name)
            if sender is None:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            for account in self.accounts:
                if receiver_name == account.owner:
                    receiver = account
                    break
            if receiver is None:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            if not sender.check_password(password):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
                return
            try:
                sender.transfer(receiver, float(sum_text))
                self.update_account_list()
                messagebox.showinfo("–£—Å–ø–µ—Ö",
                                    f"{float(sum_text):.2f} —Ä—É–±. –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –æ—Ç {sender.owner} –∫ {receiver.owner}")
            except ValueError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", e)

            finally:
                window.destroy()


        btn_transfer = tk.Button(window, text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", command=transfer_money, bg="#EE82EE")
        btn_transfer.place(x=100, y=190)

    def open_delete_account_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        pass

    def open_deposit_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞"""
        pass

    def open_withdraw_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤"""
        pass

    def save_to_file(self):
        if not self.accounts:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        filepath = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON", "*.json")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫"
        )
        if not filepath:
            return

        try:
            data = [account.to_dict() for account in self.accounts]
            with open(filepath, "w") as f:
                json.dump(data, f, indent=4)
            messagebox.showinfo("–£—Å–ø–µ—Ö",f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filepath}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n{e}")


    def load_from_file(self):
        filepath = filedialog.askopenfilename(
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json")],
            title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        )
        if not filepath:
            return
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                data = json.load(f)
                self.accounts = [BankAccount.from_dict(account) for account in data]
            self.update_account_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.accounts)}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

def main():
    root = tk.Tk()
    app = BankApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
